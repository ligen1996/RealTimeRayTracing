from falcor import *

def render_graph_TestVRay():
    g = RenderGraph('TestVRay')
    loadRenderPassLibrary('CSM.dll')
    loadRenderPassLibrary('MergePass.dll')
    loadRenderPassLibrary('BSDFViewer.dll')
    loadRenderPassLibrary('MinimalPathTracer.dll')
    loadRenderPassLibrary('DrawLightQuad.dll')
    loadRenderPassLibrary('AccumulatePass.dll')
    loadRenderPassLibrary('ATrousFilter.dll')
    loadRenderPassLibrary('Antialiasing.dll')
    loadRenderPassLibrary('SkyBox.dll')
    loadRenderPassLibrary('BlitPass.dll')
    loadRenderPassLibrary('DebugPasses.dll')
    loadRenderPassLibrary('ForwardLightingPass.dll')
    loadRenderPassLibrary('DepthPass.dll')
    loadRenderPassLibrary('ErrorMeasurePass.dll')
    loadRenderPassLibrary('FlatNormal.dll')
    loadRenderPassLibrary('FLIPPass.dll')
    loadRenderPassLibrary('GBuffer.dll')
    loadRenderPassLibrary('PixelInspectorPass.dll')
    loadRenderPassLibrary('ImageLoader.dll')
    loadRenderPassLibrary('Utils.dll')
    loadRenderPassLibrary('LTCLight.dll')
    loadRenderPassLibrary('MegakernelPathTracer.dll')
    loadRenderPassLibrary('MergeChannels.dll')
    loadRenderPassLibrary('MotionedShadow.dll')
    loadRenderPassLibrary('OptixDenoiser.dll')
    loadRenderPassLibrary('PassLibraryTemplate.dll')
    loadRenderPassLibrary('SceneDebugger.dll')
    loadRenderPassLibrary('ShadowRayTracing.dll')
    loadRenderPassLibrary('ShadowTaaPass.dll')
    loadRenderPassLibrary('SimplePostFX.dll')
    loadRenderPassLibrary('SpatioTemporalSM.dll')
    loadRenderPassLibrary('TemporalDelayPass.dll')
    loadRenderPassLibrary('SSAO.dll')
    loadRenderPassLibrary('SVGFPass.dll')
    loadRenderPassLibrary('TestPasses.dll')
    loadRenderPassLibrary('ToneMapper.dll')
    loadRenderPassLibrary('VPathTracer.dll')
    loadRenderPassLibrary('WhittedRayTracer.dll')
    GBufferRaster = createPass('GBufferRaster', {'samplePattern': SamplePattern.Center, 'sampleCount': 16, 'useAlphaTest': True, 'adjustShadingNormals': True, 'forceCullMode': False, 'cull': CullMode.CullBack})
    g.addPass(GBufferRaster, 'GBufferRaster')
    ShadowRayTracing = createPass('ShadowRayTracing', {'maxBounces': 3, 'computeDirect': True})
    g.addPass(ShadowRayTracing, 'ShadowRayTracing')
    g.addEdge('GBufferRaster.posW', 'ShadowRayTracing.posW')
    g.addEdge('GBufferRaster.normW', 'ShadowRayTracing.normalW')
    g.addEdge('GBufferRaster.tangentW', 'ShadowRayTracing.tangentW')
    g.addEdge('GBufferRaster.faceNormalW', 'ShadowRayTracing.faceNormalW')
    g.addEdge('GBufferRaster.viewW', 'ShadowRayTracing.viewW')
    g.addEdge('GBufferRaster.diffuseOpacity', 'ShadowRayTracing.mtlDiffOpacity')
    g.addEdge('GBufferRaster.specRough', 'ShadowRayTracing.mtlSpecRough')
    g.addEdge('GBufferRaster.emissive', 'ShadowRayTracing.mtlEmissive')
    g.addEdge('GBufferRaster.matlExtra', 'ShadowRayTracing.mtlParams')
    g.markOutput('ShadowRayTracing.color')
    return g

TestVRay = render_graph_TestVRay()
try: m.addGraph(TestVRay)
except NameError: None
